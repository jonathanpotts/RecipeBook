@page "/recipes/{Id:long}"
@inject IRecipeService RecipeService

@if (recipe == null)
{
    <PageTitle>Recipe</PageTitle>

    <h1>Recipe</h1>

    <p>Loading...</p>
}
else
{
    <PageTitle>@recipe.Name</PageTitle>

    <h1>@recipe.Name</h1>

    <p class="lead">@recipe.Cuisine!.Name</p>

    @if (recipe.CoverImage != null)
    {
        <img
            src="@recipe.CoverImage.Url"
            alt="@recipe.CoverImage.AltText"
            class="w-100 rounded mb-4 object-fit-cover"
            height="300" />
    }

    <p class="mb-5">@recipe.Description</p>

    <div class="row">
        <div class="col-xl-4 col-xxl-3 mb-5">
            <div class="card">
                <div class="card-header">
                    Ingredients
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var ingredient in recipe.Ingredients ?? Enumerable.Empty<string>())
                    {
                        <li class="list-group-item">@ingredient</li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-xl-8 col-xxl-9 mb-5">
            <section id="instructions">
                @((MarkupString)recipe.Instructions!.Html!)
            </section>
        </div>
    </div>
}

@code {
    [Parameter]
    public long Id { get; set; }

    private RecipeWithCuisineDto? recipe = null;

    protected override async Task OnInitializedAsync()
    {
        recipe = await RecipeService.GetAsync(Id);
    }
}
