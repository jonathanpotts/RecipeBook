@page "/recipes/{Id:long}"
@inject IRecipeService RecipeService

@if (recipe == null)
{
    <PageTitle>Recipe</PageTitle>

    <MudText Typo="Typo.h4">Recipe</MudText>

    <MudText>Loading...</MudText>
}
else
{
    <PageTitle>@recipe.Name</PageTitle>

    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudText Typo="Typo.h4">@recipe.Name</MudText>

        <MudText Typo="Typo.subtitle1" Class="mb-3">@recipe.Cuisine!.Name</MudText>

        @if (recipe.CoverImage != null)
        {
            <MudImage
                Src="@recipe.CoverImage.Url"
                Alt="@recipe.CoverImage.AltText"
                Height="300"
                ObjectFit="ObjectFit.Cover"
                Class="rounded-lg mb-6"
                Style="width: 100%" />
        }

        <MudText Class="mb-6">@recipe.Description</MudText>

        <MudGrid Spacing="6" Class="mb-3">
            <MudItem xs="12" lg="4">
                <MudPaper>
                    <MudList>
                        <MudListSubheader>Ingredients</MudListSubheader>
                        @foreach (var ingredient in recipe.Ingredients ?? Enumerable.Empty<string>())
                        {
                            <MudListItem Text="@ingredient" />
                        }
                    </MudList>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" lg="8">
                <section id="instructions">
                    @((MarkupString)recipe.Instructions!.Html!)
                </section>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter]
    public long Id { get; set; }

    private RecipeWithCuisineDto? recipe = null;

    protected override async Task OnInitializedAsync()
    {
        recipe = await RecipeService.GetAsync(Id);
    }
}
