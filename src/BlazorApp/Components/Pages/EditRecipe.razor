@page "/recipes/{Id:long}/edit"
@inject ICuisineService CuisineService
@inject IRecipeService RecipeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode InteractiveServer

@if (_recipe == null)
{
    <PageTitle>Edit Recipe</PageTitle>

    <h1>Edit Recipe</h1>

    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <PageTitle>Edit @_recipe.Name</PageTitle>

    <h1 class="mb-3">Edit @_recipe.Name</h1>

    <AuthorizeView Policy="@Policies.Update" Resource="_recipe">
        <Authorized>
            <EditForm Model="Model" OnValidSubmit="OnValidSubmitAsync" Context="FormContext">
                <FluentValidationValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name">Name</label>
                    <InputText @bind-Value="Model!.Name" id="name" class="form-control" />
                    <ValidationMessage For="@(() => Model!.Name)" />
                </div>
                @if (_cuisines != null)
                {
                    <div class="mb-3">
                        <label for="cuisine">Cuisine</label>
                        <InputSelect @bind-Value="Model!.CuisineId" id="cuisine" class="form-select">
                            <option value="">Select cuisine</option>
                            @foreach (var cuisine in _cuisines)
                            {
                                <option value="@cuisine.Id">@cuisine.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Model!.CuisineId)" />
                    </div>
                }
                <div class="mb-3">
                    <label for="description">Description</label>
                    <InputText @bind-Value="Model!.Description" id="description" class="form-control" />
                    <ValidationMessage For="@(() => Model!.Description)" />
                </div>
                <div class="mb-3">
                    <label>Ingredients</label>
                    @for (var i = 0; i < Model!.Ingredients?.Count; i++)
                    {
                        var index = i;

                        <div class="mb-2">
                            <div class="d-flex">
                                <InputText @bind-Value="Model!.Ingredients[index].Value" class="form-control" />
                                <button class="btn btn-link link-secondary pe-0" type="button" @onclick="() => RemoveIngredient(index)">
                                    <i class="bi bi-x-circle-fill" aria-label="Remove"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => Model!.Ingredients[index].Value)" />
                        </div>
                    }
                    <button class="btn btn-secondary" type="button" @onclick="AddIngredient">
                        <i class="bi bi-plus-circle"></i>
                        Add Ingredient
                    </button>
                </div>
                <div class="mb-3">
                    <label for="instructions">Instructions</label>
                    <InputTextArea @bind-Value="Model!.Instructions" id="instructions" class="form-control" rows="5" />
                    <div class="form-text">Markdown is supported.</div>
                    <ValidationMessage For="@(() => Model!.Instructions)" />
                </div>
                <button type="submit" class="btn btn-primary mb-3">Submit</button>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <p class="text-danger">You do not have permission to edit @_recipe.Name.</p>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public long Id { get; set; }

    public EditFormModel? Model { get; set; }

    private IEnumerable<CuisineDto>? _cuisines;
    private RecipeWithCuisineDto? _recipe;

    protected override async Task OnInitializedAsync()
    {
        _cuisines ??= await CuisineService.GetListAsync();

        _recipe ??= await RecipeService.GetAsync(Id);

        if (_recipe == null)
        {
            return;
        }

        Model ??= new EditFormModel
        {
            Name = _recipe.Name,
            CuisineId = _recipe.Cuisine?.Id ?? default,
            Description = _recipe.Description,
            Ingredients = _recipe.Ingredients?
                .Select(x => new StringValue { Value = x })
                .ToList(),
            Instructions = _recipe.Instructions?.Markdown,
        };
    }

    private void AddIngredient()
    {
        if (Model == null)
        {
            return;
        }

        Model.Ingredients ??= [];
        Model.Ingredients.Add(new StringValue());
    }

    private void RemoveIngredient(int index)
    {
        if (Model == null)
        {
            return;
        }

        Model.Ingredients?.RemoveAt(index);
    }

    private async Task OnValidSubmitAsync()
    {
        if (Model == null)
        {
            return;
        }

        CreateUpdateRecipeDto dto = new()
        {
            Name = Model.Name,
            CuisineId = Model.CuisineId,
            Description = Model.Description,
            Ingredients = Model.Ingredients?
                .Select(x => x.Value ?? string.Empty)
                .Where(x => !string.IsNullOrEmpty(x))
                .ToArray(),
            Instructions = Model.Instructions
        };

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        await RecipeService.UpdateAsync(Id, dto, authenticationState.User);

        NavigationManager.NavigateTo($"recipes/{Id}");
    }

    public class StringValue
    {
        public string? Value { get; set; }
    }

    public class EditFormModel
    {
        public string? Name { get; set; }

        public int CuisineId { get; set; }

        public string? Description { get; set; }

        public List<StringValue>? Ingredients { get; set; }

        public string? Instructions { get; set; }
    }

    public class StringValueValidator : AbstractValidator<StringValue>
    {
        public StringValueValidator()
        {
            RuleFor(x => x.Value).NotEmpty().WithName("Ingredient");
        }
    }

    public class EditFormModelValidator : AbstractValidator<EditFormModel>
    {
        public EditFormModelValidator()
        {
            RuleFor(x => x.Name).NotEmpty();
            RuleFor(x => x.CuisineId).NotEmpty();
            RuleFor(x => x.Ingredients).NotEmpty();
            RuleForEach(x => x.Ingredients).SetValidator(new StringValueValidator());
            RuleFor(x => x.Instructions).NotEmpty();
        }
    }
}
