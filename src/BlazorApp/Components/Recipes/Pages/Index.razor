@page "/recipes"
@inject ICuisineService CuisineService
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Recipes</PageTitle>

<h1>Recipes</h1>

@if (_recipes == null)
{
    <p>Loading...</p>
}
else
{
    foreach (var cuisine in _cuisines ?? Enumerable.Empty<CuisineDto>())
    {
        <div class="form-check form-check-inline">
            <input type="checkbox"
                class="form-check-input"
                id=@($"cuisine_{cuisine.Id}")
                checked="@_cuisineFilter.Contains(cuisine.Id)"
                @onchange="async e => await CuisineFilterChanged(cuisine.Id, e.Value)" />
            <label
                class="form-check-label"
                for=@($"cuisine_{cuisine.Id}")>
                @cuisine.Name
            </label>
        </div>
    }

    <ul>
        @foreach (var recipe in _recipes.Items)
        {
            <RecipeCard Recipe="recipe" />
        }
    </ul>

    <p><strong>Total:</strong> @_recipes.Total</p>
}

@code {
    private const int PageSize = 20;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int[]? CuisineIds { get; set; }

    private IEnumerable<CuisineDto>? _cuisines = null;
    private PagedResult<RecipeWithCuisineDto>? _recipes = null;

    private HashSet<int> _cuisineFilter = [];

    protected override async Task OnInitializedAsync()
    {
        foreach (var id in CuisineIds ?? Enumerable.Empty<int>())
        {
            _cuisineFilter.Add(id);
        }

        _cuisines = (await CuisineService.GetListAsync()).OrderBy(x => x.Name);
        await ReloadRecipesAsync();
    }

    private async Task ReloadRecipesAsync()
    {
        _recipes = await RecipeService.GetListAsync(Page * PageSize, PageSize, _cuisineFilter.ToArray());
    }

    private async Task CuisineFilterChanged(int id, object? value)
    {
        if (value is true)
        {
            _cuisineFilter.Add(id);
        }
        else
        {
            _cuisineFilter.Remove(id);
        }

        var newUri = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "cuisineIds", _cuisineFilter.ToArray() },
            { "page", null }
        });

        NavigationManager.NavigateTo(newUri);
        await ReloadRecipesAsync();
    }
}
