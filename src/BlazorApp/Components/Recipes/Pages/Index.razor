@page "/recipes"
@inject ICuisineService CuisineService
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Recipes</PageTitle>

<h1>Recipes</h1>

@if (_recipes == null)
{
    <p>Loading...</p>
}
else
{
    foreach (var cuisine in _cuisines ?? Enumerable.Empty<CuisineDto>())
    {
        <div class="form-check form-check-inline">
            <input type="checkbox"
                class="form-check-input"
                id=@($"cuisine_{cuisine.Id}")
                checked="@(_cuisineFilter?.Contains(cuisine.Id) ?? false)"
                @onchange="e => CuisineFilterChanged(cuisine.Id, e.Value)" />
            <label
                class="form-check-label"
                for=@($"cuisine_{cuisine.Id}")>
                @cuisine.Name
            </label>
        </div>
    }

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 row-cols-xxl-5 g-3">
        @foreach (var recipe in _recipes.Items)
        {
            <div class="col">
                <RecipeCard Recipe="recipe" />
            </div>
        }
    </div>

    <nav aria-label="Page navigation" class="py-4">
        <ul class="pagination justify-content-center">
            <li class=@(Page is null or 1 ? "page-item disabled" : "page-item")>
                <NavLink
                    class="page-link"
                    href=@(Page is null or 1 ? null : GetPageUri(Page - 1))>
                    Previous
                </NavLink>
            </li>
            @foreach (var page in GetPagination())
            {
                if (page > 0)
                {
                    <li class="page-item">
                        <NavLink
                            class=@(page == 1 && NavigationManager.Uri == GetPageUri(null) ? "page-link active" : "page-link")
                            href="@GetPageUri(page)">
                            @(page)
                        </NavLink>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <span class="page-link disabled">...</span>
                    </li>
                }
            }
            <li class=@((_totalPages == 1 || Page == _totalPages) ? "page-item disabled" : "page-item")>
                <NavLink
                    class="page-link"
                    href=@((_totalPages == 1 || Page == _totalPages) ? null : GetPageUri((Page ?? 1) + 1))>
                    Next
                </NavLink>
            </li>
        </ul>
    </nav>
}

@code {
    private const int PageSize = 3;
    private const int PaginatorSize = 7;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int[]? CuisineIds { get; set; }

    private IEnumerable<CuisineDto>? _cuisines = null;
    private PagedResult<RecipeWithCuisineDto>? _recipes = null;

    private HashSet<int>? _cuisineFilter;
    private int _totalPages;

    protected override async Task OnParametersSetAsync()
    {
        _cuisineFilter = [..CuisineIds];

        _cuisines = (await CuisineService.GetListAsync()).OrderBy(x => x.Name);

        var skip = Page != null ? (Page - 1) * PageSize : null;
        _recipes = await RecipeService.GetListAsync(skip, PageSize, _cuisineFilter?.ToArray());

        _totalPages = _recipes.Total % PageSize > 0
            ? (_recipes.Total / PageSize) + 1
            : _recipes.Total / PageSize;
    }

    private void UpdateQueryString()
    {
        var newUri = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "cuisineIds", _cuisineFilter?.ToArray() },
            { "page", Page }
        });

        NavigationManager.NavigateTo(newUri);
    }

    private string GetPageUri(int? page)
    {
        return NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "cuisineIds", _cuisineFilter?.ToArray() },
            { "page", page }
        });
    }

    private void CuisineFilterChanged(int id, object? value)
    {
        _cuisineFilter ??= [];

        if (value is true)
        {
            _cuisineFilter.Add(id);
        }
        else
        {
            _cuisineFilter.Remove(id);
        }

        UpdateQueryString();
    }

    private IEnumerable<int> GetPagination()
    {
        if (_totalPages <= PaginatorSize)
        {
            return Enumerable.Range(1, _totalPages);
        }

        List<int> pages = [];

        var half = PaginatorSize / 2;

        if ((Page ?? 1) <= half + 1)
        {
            pages.AddRange(Enumerable.Range(1, PaginatorSize - 2));
            pages.Add(-1);
            pages.Add(_totalPages);
        }
        else if ((Page ?? 1) >= _totalPages - half)
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(_totalPages - PaginatorSize + 3, PaginatorSize - 2));
        }
        else
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range((Page ?? 1) - half + 2, PaginatorSize - 4));
            pages.Add(-1);
            pages.Add(_totalPages);
        }

        return pages;
    }
}
