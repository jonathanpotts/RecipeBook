@page "/recipes"
@inject ICuisineService CuisineService
@inject IRecipeService RecipeService
@rendermode InteractiveServer

<PageTitle>Recipes</PageTitle>

<h1>Recipes</h1>

@if (recipes == null)
{
    <p>Loading...</p>
}
else
{
    foreach (var cuisine in cuisines ?? Enumerable.Empty<CuisineDto>())
    {
        <div class="form-check form-check-inline">
            <input type="checkbox"
                class="form-check-input"
                id=@($"cuisine_{cuisine.Id}")
                checked="@cuisineFilter.Contains(cuisine.Id)"
                @onchange="async e => await CuisineFilterChanged(cuisine.Id, e.Value)" />
            <label
                class="form-check-label"
                for=@($"cuisine_{cuisine.Id}")>
                @cuisine.Name
            </label>
        </div>
    }

    <ul>
        @foreach (var recipe in recipes.Items)
        {
            <RecipeCard Recipe="recipe" />
        }
    </ul>

    <p><strong>Total:</strong> @recipes.Total</p>
}

@code {
    private IEnumerable<CuisineDto>? cuisines = null;
    private PagedResult<RecipeWithCuisineDto>? recipes = null;

    private HashSet<int> cuisineFilter = [];

    protected override async Task OnInitializedAsync()
    {
        cuisines = (await CuisineService.GetListAsync()).OrderBy(x => x.Name);
        await ReloadRecipesAsync();
    }

    private async Task ReloadRecipesAsync()
    {
        var cuisineIds = cuisineFilter.Count > 0 ? cuisineFilter.ToArray() : null;

        recipes = await RecipeService.GetListAsync(cuisineIds: cuisineIds);
    }

    private async Task CuisineFilterChanged(int id, object? value)
    {
        if (value is true)
        {
            cuisineFilter.Add(id);
        }
        else
        {
            cuisineFilter.Remove(id);
        }

        await ReloadRecipesAsync();
    }
}
