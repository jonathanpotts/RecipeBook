@page "/recipes"
@inject ICuisineService CuisineService
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<PageTitle>Recipe Catalog</PageTitle>

<MudText Typo="Typo.h4">Recipes</MudText>

@if (_cuisines != null)
{
    <MudField Label="Cuisines" Variant="Variant.Outlined" InnerPadding="false" Class="my-4">
        <div class="d-flex flex-wrap">
            @foreach (var cuisine in _cuisines ?? Enumerable.Empty<CuisineDto>())
            {
                <MudCheckBox T="bool"
                    Label="@cuisine.Name"
                    Value="@(_cuisineFilter?.Contains(cuisine.Id) ?? false)"
                    ValueChanged="value => CuisineFilterChanged(cuisine.Id, value)" />
            }
        </div>
    </MudField>
}

<MudGrid Spacing="3" Class="my-4">
    @if (_recipes == null)
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <RecipeCard />
        </MudItem>
    }
    else
    {
        @foreach (var recipe in _recipes.Items)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <RecipeCard Recipe="recipe" />
            </MudItem>
        }
    }
</MudGrid>

@if (_recipes != null)
{
    <div class="d-flex flex-column align-center my-4">
        <MudPagination Count="_totalPages" Selected="_selectedPage" SelectedChanged="PageSelected" />
    </div>
}

@code {
    private const int PageSize = 20;
    private const int PaginatorSize = 7;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int[]? CuisineIds { get; set; }

    private IEnumerable<CuisineDto>? _cuisines = null;
    private PagedResult<RecipeWithCuisineDto>? _recipes = null;

    private HashSet<int>? _cuisineFilter;
    private int _totalPages;

    private int _selectedPage;

    protected override async Task OnParametersSetAsync()
    {
        _recipes = null;
        _cuisines = null;

        _selectedPage = Page ?? 1;

        _cuisineFilter = [..CuisineIds];

        _cuisines = (await CuisineService.GetListAsync()).OrderBy(x => x.Name);

        var skip = Page != null ? (Page - 1) * PageSize : null;
        _recipes = await RecipeService.GetListAsync(skip, PageSize, _cuisineFilter?.ToArray());

        _totalPages = _recipes.Total % PageSize > 0
            ? (_recipes.Total / PageSize) + 1
            : _recipes.Total / PageSize;
    }

    private void UpdateQueryString()
    {
        var newUri = NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "cuisineIds", _cuisineFilter?.ToArray() },
            { "page", Page }
        });

        NavigationManager.NavigateTo(newUri);
    }

    private string GetPageUri(int? page)
    {
        return NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "cuisineIds", _cuisineFilter?.ToArray() },
            { "page", page }
        });
    }

    private void CuisineFilterChanged(int id, bool value)
    {
        _cuisineFilter ??= [];

        if (value)
        {
            _cuisineFilter.Add(id);
        }
        else
        {
            _cuisineFilter.Remove(id);
        }

        UpdateQueryString();
    }

    private void PageSelected(int page)
    {
        if (page != (Page ?? 1))
        {
            NavigationManager.NavigateTo(GetPageUri(page));
        }
    }
}
